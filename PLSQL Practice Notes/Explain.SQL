DECLARE
CURSOR C1 IS SELECT * FROM CK_EMP;
V_EMPNO CK_EMP.EMPNO%TYPE;
V_ENAME CK_EMP.ENAME%TYPE;
BEGIN
OPEN C1;
LOOP
FETCH C1 INTO V_EMPNO,V_ENAME;
EXIT WHEN C1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('Employee Name: ' || V_ENAME);
DBMS_OUTPUT.PUT_LINE('Employee NO: ' || V_EMPNO);
END LOOP;
CLOSE C1;
END;
/

--***** MOSTLYT USED IN PROJECTS****
DECLARE
CURSOR C1 IS SELECT * FROM CK_EMP;
V_EMPNO CK_EMP.EMPNO%TYPE;
V_ENAME CK_EMP.ENAME%TYPE;
BEGIN
FOR I IN C1
LOOP
V_EMPNO := I.EMPNO;
V_ENAME := I.ENAME;
DBMS_OUTPUT.PUT_LINE(V_EMPNO || ' ' || V_ENAME );
END LOOP;
END;
/

-- EXPLICIT DYNAMIC CURSOR
DECLARE
TYPE C1 IS REF CURSOR;
BEGIN
OPEN C1 FOR SELECT ENAME FROM CK_EMP;
FOR C IN C1
LOOP
DBMS_OUTPUT.PUT_LINE(C.ENAME );
END LOOP;
END;
/

--Implicit DYNAMIC CURSOR
DECLARE
C1 SYS_REFCURSOR;
V_EMP CK_EMP%ROWTYPE;
-- V_ENAME CK_EMP.ENAME%TYPE;

BEGIN
OPEN C1 FOR SELECT * FROM CK_EMP;
LOOP
FETCH C1 INTO V_EMP;
EXIT WHEN C1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(V_EMP.ENAME || ' ' || V_EMP.EMPNO);
END LOOP;
CLOSE C1;
END;
/

--COLLECTIONS

DECLARE
TYPE EMP_TBL IS TABLE OF CK_EMP%ROWTYPE INDEX BY BINARY_INTEGER;
E EMP_TBL;
BEGIN
SELECT * BULK COLLECT INTO E FROM CK_EMP;
FOR I IN E.FIRST .. E.LAST LOOP
DBMS_OUTPUT.PUT_LINE(E(I).EMPNO || ' '||E(I).ENAME);
END LOOP;
END;
/

--FUNCTIONS

CREATE OR REPLACE FUNCTION CK_EMP_EXP(
    P_EMPNO IN EMP.EMPNO%TYPE ) 
    RETURN NUMBER IS
    EXPE NUMBER;
    BEGIN
    SELECT ROUND(MONTHS_BETWEEN(SYSDATE,HIREDATE)/12) INTO EXPE FROM CK_EMP WHERE EMPNO = P_EMPNO;
    RETURN(EXPE);
    END CK_EMP_EXP;
    /

SELECT EMPNO FROM CK_EMP;
DECLARE
RES NUMBER;
BEGIN
RES:=CK_EMP_EXP(7788);
-- SELECT SIMPLE_INT(1000,2,10) INTO RES FROM DUAL;
DBMS_OUTPUT.PUT_LINE('Experience : '||RES );
END;
/

SELECT TEXT FROM USER_SOURCE WHERE NAME = 'CK_EMP_EXP';


--Write a stored procedure to increment employee salaried based on their experience
-- if expe >=10 then 50% increment
-- if expe <=10 then 20% increment

CREATE OR REPLACE PROCEDURE UPD_EMP_SAL IS 
CURSOR C1 IS SELECT EMPNO,SAL FROM CK_EMP;
V_EMPNO CK_EMP.EMPNO%TYPE;
V_SAL CK_EMP.SAL%TYPE;
BEGIN
FOR I IN C1 LOOP
V_EMPNO := I.EMPNO;
V_SAL := I.SAL;
IF CK_EMP_EXP(V_EMPNO) >= 10 THEN
V_SAL := (V_SAL*0.5);
ELSE
V_SAL := (V_SAL*0.2);
END IF;
UPDATE CK_EMP_PRATICE SET SAL=SAL+V_SAL WHERE EMPNO=V_EMPNO;
END LOOP;
COMMIT;
END UPD_EMP_SAL;
/

EXEC UPD_EMP_SAL;


DECLARE
    v_input_string VARCHAR2(100);
    v_encoded_string VARCHAR2(2000);
    v_decoded_raw RAW(2000);
    v_decoded_string VARCHAR2(100);
BEGIN
    -- Input string
    v_input_string := 'CHANDAN@1802';

    -- Encoding the input string to Base64
    v_encoded_string := UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(UTL_RAW.CAST_TO_RAW(v_input_string)));
    DBMS_OUTPUT.PUT_LINE('Encoded String: ' || v_encoded_string);

    -- Decoding the Base64 encoded string back to the original
    v_decoded_raw := UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(v_encoded_string));
    v_decoded_string := UTL_RAW.CAST_TO_VARCHAR2(v_decoded_raw);
    DBMS_OUTPUT.PUT_LINE('Decoded String: ' || v_decoded_string);
END;

SELECT UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW('Q0hBTkRBTkAxMDAx'))) FROM DUAL;