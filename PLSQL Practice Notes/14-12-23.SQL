--PROCEDURE WITH PARAMETER MODE:
-- 1. IN
CREATE OR REPLACE PROCEDURE ADD_PROC(X IN NUMBER, Y IN NUMBER) IS
BEGIN
DBMS_OUTPUT.put_line('The sum of ' || X || ' and ' || Y || ' is :'|| (X+Y));
END ADD_PROC;
/

--2. OUT
CREATE OR REPLACE PROCEDURE ADD_PROC (
    X IN NUMBER, Y IN NUMBER, Z OUT NUMBER
) IS 
BEGIN
Z := X + Y ;
END ADD_PROC;
/
-- CALLING THE PROCEDURES
-- 1. On sql prompt
VARIABLE res NUMBER; --bind VARIABLE or global VARIABLE
EXEC ADD_PROC(100,200,:RES);
PRINT :res;

-- using plsql block
DECLARE
RESULT NUMBER;
BEGIN
ADD_PROC(100,200,RESULT); --CALLING PROCEDURE
dbms_output.put_line('Result from procedure call:'|| RESULT);
END;
/

--Write a stored procedure to input employee no. and return corresponding employee netsalary

CREATE OR REPLACE PROCEDURE EMP_NETSAL(
    P_EMPNO IN EMP.EMPNO%TYPE,
    P_NETSAL OUT NUMBER
) IS 
BEGIN
SELECT SAL +NVL(COMM,0) INTO P_NETSAL FROM EMP WHERE EMPNO = P_EMPNO;
END EMP_NETSAL;
/
--Calling the above procedure
DECLARE
NETSAL NUMBER;
BEGIN
EMP_NETSAL(&EMPNO,NETSAL);
dbms_output.put_line('Net Salary for Employee No.: '|| NETSAL);
END;
/

-- Write a stored procedure to input employee no. and return corresponding employee ename, sal & DEPTNO
CREATE OR REPLACE PROCEDURE EMP_FIND(
    P_EMPNO IN EMP.EMPNO%TYPE,
    P_ENAME OUT EMP.ENAME%TYPE,
    P_SAL OUT EMP.SAL%TYPE,
    P_DEPTNO OUT EMP.DEPTNO%TYPE
    ) IS
BEGIN
SELECT ENAME,SAL,DEPTNO INTO P_ENAME,P_SAL,P_DEPTNO FROM EMP WHERE EMPNO = P_EMPNO;
END EMP_FIND;
/
-- Calling the procedure
DECLARE
V_EMPNO EMP.EMPNO%TYPE := &EMPNO;
V_ENAME EMP.ENAME%TYPE;
V_SAL EMP.SAL%TYPE;
V_DEPTNO EMP.DEPTNO%TYPE;
BEGIN
EMP_FIND(V_EMPNO,V_ENAME,V_SAL,V_DEPTNO);
dbms_output.put_line('Employee Number: ' || V_EMPNO);
dbms_output.put_line('Name :' || V_ENAME );
dbms_output.put_line('Salary :' || V_SAL);
dbms_output.put_line('Department :' || V_DEPTNO);
END;
/

--Write a stored procedure to CREATE a new user account and return status
-- validations:
-- -> userid generate automatically
-- -> minimum password length 6 char
-- -> enter and conf. password should be same
-- -> role should be accepts admin, employee, customer only

-- TABLE CREATION
DROP TABLE  USER_DETAILS;
CREATE TABLE USER_DETAILS(
    USER_ID VARCHAR(10),
    USER_NAME VARCHAR(20),
    PASSWORD VARCHAR(20),
    ROLE VARCHAR(20)
);

--SEQUENCE FOR TO generate USER IDS:

DROP SEQUENCE UID_SEQ;
CREATE SEQUENCE UID_SEQ
START WITH 1
INCREMENT BY 1;

--procedure
CREATE OR REPLACE PROCEDURE USER_REG_PROC (
    P_USER_NAME IN USER_DETAILS.USER_NAME%TYPE,
    P_PASSWORD IN USER_DETAILS.PASSWORD%TYPE,
    P_CONFIRM_PASSWORD IN USER_DETAILS.PASSWORD%TYPE,
    P_ROLE IN USER_DETAILS.ROLE%TYPE,
    P_STATUS OUT VARCHAR2
    ) IS
    BEGIN
    IF Length(P_PASSWORD) < 6 THEN
    P_STATUS:= 'Password Should Be At Least 6 Characters';
    ELSIF P_PASSWORD != P_CONFIRM_PASSWORD THEN
    P_STATUS := 'ENTER AND CNF PASSWORD SHOULD BE SAME..';
    ELSIF P_ROLE NOT IN ('ADMIN','EMPLOYEE','CUSTOMER') THEN
    P_STATUS := 'INVALID ROLE..';
    ELSE
    INSERT INTO USER_DETAILS VALUES('U'||(UID_SEQ.NEXTVAL),P_USER_NAME, P_PASSWORD, P_ROLE);
    P_STATUS := 'USER CREATED Successfully';
    END IF;
    END USER_REG_PROC;
    /

--CALLING PROCEDURE
DECLARE
V_STATUS VARCHAR(100);
BEGIN
USER_REG_PROC('CHANDAN','CHANDAN1802@','CHANDAN1802@','ADMIN',V_STATUS);
DBMS_OUTPUT.put_line(V_STATUS);
END;
/

SELECT * FROM USER_DETAILS;

--Write a stored procedure to input username and password and return status
CREATE OR REPLACE PROCEDURE LOGIN_PROC(
    P_USER_NAME IN USER_DETAILS.USER_NAME%TYPE,
    P_PASSWORD IN USER_DETAILS.PASSWORD%TYPE,
    P_STATUS OUT VARCHAR2
) IS 
CNT NUMBER;
BEGIN
SELECT COUNT(*) INTO CNT FROM USER_DETAILS WHERE USER_NAME = P_USER_NAME AND PASSWORD = P_PASSWORD;
IF CNT=0 THEN
P_STATUS:='Invalid Username or Password';
ELSE
P_STATUS:='Logged In Successfully';
END IF;
END LOGIN_PROC;
/

--CALLING PROCEDURE
DECLARE
V_STATUS VARCHAR(50);
BEGIN
LOGIN_PROC('CHANDAN','CHANDAN1802@',V_STATUS);
DBMS_OUTPUT.put_line(V_STATUS);
END;
/
SET SERVEROUTPUT ON;
SET VERIFY OFF;


--PROCEDURE FOR TO INSERT DATA INTO DEPT TABLE
CREATE OR REPLACE PROCEDURE DEPT_INS (
    P_DEPTNO DEPT.DEPTNO%TYPE, 
    P_DNAME DEPT.DNAME%TYPE DEFAULT 'UNKNOWN',
    P_LOC DEPT.LOC%TYPE DEFAULT 'UNKNOWN') IS
BEGIN
INSERT INTO DEPT_PRACTICE VALUES (P_DEPTNO,P_DNAME,P_LOC);
DBMS_OUTPUT.PUT_LINE('RECORD INSERTED');
END DEPT_INS;
/

--CALLING THE ABOVE PROCEDURE
-- I. POSITIONAL NOTATIONS
EXEC DEPT_INS(50,'MATHS','HYD');
--II. NAMED NOTATIONS
EXEC DEPT_INS(P_DNAME => 'ENGLISH', P_LOC =>'HYD',P_DEPTNO=>50);

--III. MIXED NOTATIONS
EXEC DEPT_INS(50,P_LOC=> 'HYD');


/*USER DEFINED FUNCTIONS*/
--Write a user-defined FUNCTION find simple interest

CREATE OR REPLACE FUNCTION SIMPLE_INT(P NUMBER, T NUMBER, R NUMBER)
RETURN NUMBER IS
INTEREST NUMBER;
BEGIN 
INTEREST := (P*T*R)/100;
RETURN (INTEREST);
END SIMPLE_INT;
/
-- CALLING FUNTIONS:

-- METHOD 1:
SELECT SIMPLE_INT(1000,2,10) FROM DUAL;

-- METHOD 2:
DECLARE
RES NUMBER;
BEGIN
RES:=SIMPLE_INT(1000,2,10);
-- SELECT SIMPLE_INT(1000,2,10) INTO RES FROM DUAL;
DBMS_OUTPUT.PUT_LINE('The Simple Interest is :'||RES );
END;
/

-- METHOD 3:
DECLARE
RES NUMBER;
BEGIN
RES:=SIMPLE_INT(1000,2,10);
DBMS_OUTPUT.PUT_LINE('The Simple Interest is :'||RES );
END;
/ 

--METHOD 4:
BEGIN
DBMS_OUTPUT.PUT_LINE('The Simple Interest is :'||SIMPLE_INT(1000,2,10));
END;
/
--Write a user defined function to input employee no and return experience
DROP VIEW EMP_EXP;
CREATE OR REPLACE FUNCTION EMP_EXP(
    P_EMPNO IN EMP.EMPNO%TYPE ) 
    RETURN NUMBER IS
    EXPE NUMBER;
    BEGIN
    SELECT ROUND(MONTHS_BETWEEN(SYSDATE,HIREDATE)/12) INTO EXPE FROM EMP WHERE EMPNO = P_EMPNO;
    RETURN(EXPE);
    END EMP_EXP;
    /

--Write a user defined function to find given employee record found or NOT
DROP PROCEDURE EMP_FIND;
CREATE OR REPLACE FUNCTION EMP_FIND(
    P_EMPNO IN EMP.EMPNO%TYPE 
) RETURN BOOLEAN
IS 
CNT NUMBER;
BEGIN
SELECT COUNT(*) INTO CNT FROM EMP WHERE EMPNO = P_EMPNO;
IF CNT>0 THEN
RETURN(TRUE);
ELSE
RETURN(FALSE);
END IF;
END EMP_FIND;
/
--Calling the above functions using SQL statement
DECLARE
FLAG BOOLEAN;
BEGIN
FLAG := EMP_FIND(&EMPNO);
IF FLAG = TRUE THEN
DBMS_OUTPUT.PUT_LINE('Employee Record Found');
ELSE
DBMS_OUTPUT.PUT_LINE('Employee Record Not Found');
END IF;
END;
/

--Write a stored procedure to increment employee salaried based on their experience
-- if expe >=10 then 50% increment
-- if expe <=10 then 20% increment

CREATE OR REPLACE PROCEDURE EMP_INC_PROC IS 
CURSOR C1 IS SELECT EMPNO,SAL FROM EMP;
V_EMPNO EMP.EMPNO%TYPE;
V_SAL EMP.SAL%TYPE;
V_INCR_SAL NUMBER;
BEGIN
OPEN C1;
LOOP
FETCH C1 INTO V_EMPNO,V_SAL;
EXIT WHEN C1%NOTFOUND;
IF EMP_EXP(V_EMPNO) >= 10 THEN
V_INCR_SAL:=V_SAL*0.5;
ELSE
V_INCR_SAL:=V_SAL*0.2;
END IF;
UPDATE EMP SET SAL = SAL+V_INCR_SAL WHERE EMPNO = V_EMPNO;
END LOOP;
CLOSE C1;
END EMP_INC_PROC;
/

EXEC EMP_INCR_PROC;
SELECT * FROM EMP;

SELECT * FROM EMP WHERE EMP_FIND(7839)=TRUE;
SELECT EMP_EXP(EMPNO) FROM EMP;
-- SHOW ERRORS;
-- SELECT TEXT FROM USER_SOURCE WHERE NAME ='DEPT_INS';
-- SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_TYPE='PROCEDURE';
-- SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_TYPE='FUNCTION';
-- DROP PROCEDURE <PROCEDURE_NAME>
-- DROP FUNCTION <FUNCTION_NAME>

--PACKAGE

--Write a package program to find employee netsalary and dept. name

-- PACKAGE SPECIFICATION
CREATE OR REPLACE PACKAGE EMP_PACK IS
PROCEDURE EMP_NETSAL (V_EMPNO EMP.EMPNO%TYPE);
FUNCTION EMP_DNAME (V_EMPNO EMP.EMPNO%TYPE) RETURN VARCHAR2;
END EMP_PACK;
/

--PACKAGE BODY
CREATE OR REPLACE PACKAGE BODY EMP_PACK IS

PROCEDURE EMP_NETSAL (V_EMPNO EMP.EMPNO%TYPE) IS
V_NETSAL NUMBER;
BEGIN
SELECT SAL+NVL(COMM,0) INTO V_NETSAL FROM EMP WHERE EMPNO = V_EMPNO;
DBMS_OUTPUT.PUT_LINE('Net Salary of Employee : '|| V_NETSAL);
END EMP_NETSAL;

FUNCTION EMP_DNAME (V_EMPNO EMP.EMPNO%TYPE) RETURN VARCHAR2 IS
V_DNAME DEPT.DNAME%TYPE;
BEGIN
SELECT DNAME INTO V_DNAME FROM DEPT WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE EMPNO = V_EMPNO);
RETURN(V_DNAME);
END EMP_DNAME;

END EMP_PACK;
/
--CALLING PACKAGES

EXEC EMP_PACK.EMP_NETSAL(7788);
SELECT EMP_PACK.EMP_DNAME(7788) FROM DUAL;

--FUNCTION OVERLOADING

--PACKAGE SPECIFICATION
CREATE OR REPLACE PACKAGE FO_PACK IS 
FUNCTION ADDVAL(X NUMBER,Y NUMBER) RETURN NUMBER;
FUNCTION ADDVAL(X NUMBER, Y NUMBER, Z NUMBER) RETURN NUMBER;
END FO_PACK;
/


--PACKAGE BODY
CREATE OR REPLACE PACKAGE BODY FO_PACK IS 

FUNCTION ADDVAL(X NUMBER,Y NUMBER) RETURN NUMBER IS
BEGIN
RETURN (X+Y);
END ADDVAL;

FUNCTION ADDVAL(X NUMBER, Y NUMBER, Z NUMBER) RETURN NUMBER IS 
BEGIN
RETURN (X+Y+Z);
END ADDVAL;

END FO_PACK;
/

--CALLING PACKAGES

SELECT FO_PACK.ADDVAL(10,20,30) FROM DUAL;

